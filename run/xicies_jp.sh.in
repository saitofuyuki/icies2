#!@ZSH@ -f
# Time-stamp: <2021/02/10 21:53:42 fuyuki xicies_jp.sh.in>
#
# Copyright: 2019-2021 JAMSTEC, Ayako ABE-OUCHI
# Licensed under the Apache License, Version 2.0
#   (https://www.apache.org/licenses/LICENSE-2.0)

#---------------------------------------------------------------------- predefined
typeset -A CFGW CFGC CFGE
setopt nullglob

thisd=$0:h
thisx=$0:t
thisp=$0

UNITS=@UNITS@
GMT=@GMT@

## W
CFGW=(const 0   vialov 1  power 2)

## Advection scheme
CFGC=(up1 1:u   rcip 2:r  up2 4:s  modr 5:m   up1n 1:n:0)

typeset -A RECG
RECG=(VMTI  : VMTA : VMTD : VMHB 100
      VMHI  : VMHW : VBBI : VBBT :
      VXCFG - VMHR -)

typeset -A GFILV
GFILV=(VMHB Ms:Mb:Tsi:Tbi:gh
       VMTA age:dad3:dadz
       VMHI oH:oS:oB:nH:nS:nB
       VMHW Hinv:dHdt:dBdt
       VMTI T:wadv:wh:dwdZ
       VBBT T
       VBBI Tu:hR:gh)

bpath=($thisd)
cbase=cnx.sh
xbase=icies_tgv

ADIR=()

help ()
{
  local verbose=$1
  cat << USAGE
$thisx - IcIES-2/JP run script

Usage: $thisp [OPTION] REFERENCE[:ID] KEY=CONFIGURATION...

Options:
   -h          display this help and exit (longer help with multiple -v)
   -v          increase verbose level
   -n          dry-run
   -f          force overwrite (default to preserve)
   -t  [END][:[DT]][:[REC]]
               set integration time (END), time step (DT),
               and/or recording interval (REC)
   -C  PATH    path to conversion script (cnx.sh)
   -X  PATH    path to executable (icies_tgv)
   -x  PREFIX  prefix to output directory
USAGE

  if [[ $verbose -gt 0 ]]; then
    cat <<CONFIG

 REFERENCE[:ID]
   Reference configuration.
   DIRECTORY/{domain,*max,*min} are used for the inputs

Configuration keys
 Mandatory
   C=SCHEME
      Numerical scheme for advection solver {${(k)CFGC}}
   Z=[LEVELS][:[PARAMETER]]
      Vertical levels.

 Optional
   [ABHT]=FUNC:DUR:HIGH:LOW[:SHIFT]
      Regular evolution for surface mass balance(A), basal mass balance(B),
      thickness(H), surface temperature(T).
      FUNC as id for evolution function {step cosine linear exponential var}.
      DUR as duration of one cycle.
      HIGH,LOW as ratio of duration for high,low phase.
      SHIFT as offset of phase (in ratio).
   [ABHT]=FILE[:id]
     Evolution by external file FILE.
   W=TYPE
      Vertical velocity condition (default=vialov) {${(k)CFGW}}

Examples
  $thisp -t 1000000:100:100000 Z=129 C=rcip R=cfg/exp000 A=step:100000:1:1
CONFIG
  fi
  return 0
}

help_config ()
{
  local __cfg=$1; shift
  local -A cfg=()
  set -A cfg "${(@Pkv)__cfg}"
  print -
  [[ $# -gt 0 ]] && print -l - "$@"
  local k= v=
  for k in ${(ok)cfg}
  do
    v="$cfg[$k]"
    print - "   $k:   $v"
  done
}
#---------------------------------------------------------------------- driver
main ()
{
  local tmpa=
  local tcfg=3000000
  local GRPS=VMTA:VMTD:VXCFG:VMHB:VMTI:VMHR:VMHI:VMHW:VBBI:VBBT
  local xpfx= xsfx=
  local force=
  local args=("$@")
  local dry=
  local verbose=0 help=
  local ecfg=./cfg/evolution.cfg
  local np=1
  while [[ $# -gt 0 ]]
  do
    case $1 in
    (-v)   let verbose++;;
    (-vv)  verbose=2;;
    (-vvv) verbose=3;;
    (-n)  dry=$1;;
    (-h)  help=T;;
    (-f)  force=T;;
    (-np) np=$2; shift;;
    (-t)  tcfg=$2; shift;;
    (-t*) tcfg=${1: 2};;
    (-G)  GRPS=$2; shift;;
    (-G*) GRPS=${1: 2};;
    (-C)  xcnx=$2; shift;;
    (-C*) xcnx=${1: 2};;
    (-X)  xicies=$2; shift;;
    (-X*) xicies=${1: 2};;
    (-x)  xpfx=$2; shift;;
    (-x*) xpfx=${1: 2};;
    (+x)  xsfx=$2; shift;;
    (+x*) xsfx=${1: 2};;
    (-E)  ecfg=$2; shift;;
    (-E*) ecfg=${1: 2};;
    (-A)  ADIR+=($2); shift;;
    (-A*) ADIR+=(${1: 2});;
    (*) break;;
    esac
    shift
  done
  [[ $# -eq 0 || -n $help ]] && help $verbose && return 0
  local REFD=$1; shift
  local REFID=${REFD%%*:}; REFID=${REFID:t}
  REFD=${REFD:A}
  local rdom=$REFD/domain
  [[ ! -e $rdom ]] && print -u2 - "Not found reference domain $rdom." && return 1

  local p=
  if [[ -z $xicies ]]; then
    local grp= ncf=
    for p in $bpath
    do
      xicies=$p/$xbase
      [[ -e $xicies ]] && break
    done
  fi
  xicies=${xicies:a}
  [[ ! -x $xicies ]] && print -u2 - "$thisx: not found $xicies." && return 1

  if [[ -z $xcnx ]]; then
    for p in $bpath
    do
      xcnx=$p/$cbase
      [[ -e $xcnx ]] && break
    done
  fi
  xcnx=${xcnx:a}
  [[ ! -x $xcnx ]] && print -u2 - "$thisx: netcdf conversion disabled." && xcnx=

  ########## parse times  -t [END][:[DT][:[REC]]]
  tcfg=("${(@s/:/)tcfg}" '' '')
  local tend= dt=
  nml_units tend $tcfg[1] yr || return $?
  shift tcfg
  nml_units dt ${tcfg[1]:-10} yr || return $?
  shift tcfg
  local rect=${tcfg[1]}
  if [[ -z $rect ]];then
    local odr=$((tend / 1000))
    rect=1
    while [[ $rect -lt $odr ]]
    do
      rect=$((rect * 10))
    done
  elif [[ $rect[1] == '@' ]];then
    rect=$((tend / ${rect: 1} ))
  else
    nml_units rect ${tcfg[1]} yr || return $?
  fi
  [[ $rect -lt $dt ]] && rect=$dt
  local TEND=$((tend+dt))
  ########## parse groups
  local grps= gtmp=
  for grps in ${(s/:/)GRPS}
  do
    grps=(${(s/,/)grps})
    [[ -n $grps[2] ]] && RECG[$grps[1]]=$grps[2]
    gtmp=($gtmp $grps[1])
  done
  GRPS=($gtmp)

  ########## parse configuration
  local cfgw=vialov cfba= cfgb= cfgh= cfgz= cfgc= cfgt=

  local k= v=
  while [[ $# -gt 0 ]]
  do
    case $1 in
    (*=*)
      k=${1%=*}
      v=${1#*=}
      case $k in
      (Z) cfgz=$v;;
      (C) cfgc=$v;;
      (W) cfgw=$v;;
      ([HABT]) CFGE[$k]="$v";;
      (*) print -u2 - "$thisx: unknown config key $k"; return 1;;
      esac
      ;;
    (*) break;;
    esac
    shift
  done
  # parse W   TYPE[:PARAMETER]
  local idw=
  v=("${(@s/:/)cfgw}"); k=$v[1]; shift v
  if [[ -z $CFGW[$k] ]];then
    print -u2 "$thisx: unknown configuration (W) $cfgw"
    return 1
  fi
  idw=$k[1]${(j:_:)v[1]}
  cfgw=${CFGW[$k]}:${v[1]:--}

  # parse Z   [NLEV][:][PARAMETER]
  local idz=
  [[ -z $cfgz ]] && print -u2 "$thisx: need Z configuration." && return 1
  v=("${(@s/:/)cfgz}"); k=$v[1]; shift v
  if [[ $k[1] =~ [0-9] ]];then
    cfgz=${k}:${v[1]:--}
    idz=${k}$v[1]
  else
    cfgz=:${k}
    idz=$k
  fi

  # parse C
  [[ -z $cfgc ]] && print -u2 "$thisx: need C configuration." && return 1
  v=("${(@s/:/)cfgc}"); k=$v[1]; shift v
  if [[ -z $CFGC[$k] ]];then
    print -u2 "$thisx: unknown configuration (C) $cfgc"
    return 1
  fi
  cfgc=(${(s/:/)CFGC[$k]})
  local idc=$cfgc[2] cadv=$cfgc[3]
  cfgc=$cfgc[1]

  # parse evolution
  for k in H A B T
  do
    parse_evolution id$k cfg$k $ecfg "${(@s/:/)CFGE[$k]}" || return $?
  done

  # diag
  print -u2 - "##  Configuration"
  print -u2 - "W: $idw $cfgw"
  print -u2 - "Z: $idz $cfgz"
  print -u2 - "C: $idc $cfgc $cadv"
  print -u2 - "H: $idH $cfgH"
  print -u2 - "A: $idA $cfgA"
  print -u2 - "B: $idB $cfgB"
  print -u2 - "T: $idT $cfgT"

  local xdir=${xpfx:-ox}.R${REFID}_W${idw}_Z${idz}_C${idc}_H${idH}_A${idA}_B${idB}_T${idT}.${xsfx:-00}
  print -u2 - "output: $xdir"

  for a in $ADIR
  do
    if [[ ${a: -2} == // ]]; then
      a=(${a} ${a}*(/))
    fi
    for a in $a
    do
      [[ -e $a/$xdir ]] && print -u2 "$thisx: archived ($a/$xdir)." && return 0
    done
  done
  [[ -e $xdir && -n $force ]] && print -u2 "$thisx: force overwrite $xdir." && rm -rf $xdir
  [[ -e $xdir ]] && print -u2 "$thisx: already exists $xdir" && return 1

  mkdir -p $xdir
  cp $xicies $xdir
  cd $xdir
  local sysin=sysin

  gen_sysin ${np:-1} ${REFD} $sysin "$cfgw" "$cfgz" "$cfgH" "$cfgA" "$cfgB" "$cfgT" "$cfgc:$cadv" || return $?

  if [[ -n $dry ]]; then
    print -u2 - "$thisx: dry-run: ${xdir}"
    return 0
  fi
  local udir=u
  mkdir $udir
  mkdir O V L
  if [[ $np -gt 1 ]]; then
    mpirun -np $np ./${xicies:t} < $sysin > $udir/output 2> $udir/error
  else
    ( time ./${xicies:t} < $sysin > $udir/output ) 2> $udir/error
  fi

  if [[ -n $xcnx ]]; then
    local grp= ncf= logs=
    for grp in $GRPS
    do
      ncf=${grp:l}.nc
      logs=L/vrep
      if [[ -e $logs ]]; then
        $xcnx -f -G $grp -F $ncf $logs
      else
        $xcnx -f -G $grp -F $ncf $logs.000*
      fi
    done > $udir/log.cnx 2>&1
  fi

  return 0
}

parse_evolution ()
{
  local __vi=$1; shift
  local __vc=$1; shift
  local ecfg=$1; shift
  local _vi= _vc=
  local func=$1 dur=$2 high=$3 low=$4 off=$5
  if [[ -z $func ]]; then
    _vi=0 _vc=(step 0 0 0 0)
  elif [[ -e $func ]]; then
    func=${func:A}
    _vi=$2
    [[ -z $_vi ]] && _vi=$func:t
    _vc=($func)
  else
    [[ ! -e $ecfg ]] && mkdir -p $ecfg:h && touch $ecfg
    off=${off:-0}
    nml_units dur $dur yr || return $?
    local k=$func:$dur:$high:$low:$off
    _vi=($(sed -ne "/^$k /s///p" $ecfg))
    if [[ -z $_vi ]]; then
      _vi=${func: :1}
      local did=
      nml_units did $dur yr M k || return $?
      local pk=$high:$low:$off
      local pid=($(sed -ne "/^@E:$pk /s///p" $ecfg))
      if [[ -z $pid ]]; then
        pid=$(grep -c '^@E:' $ecfg)
        print - "@E:$high:$low:$off $pid" >> $ecfg
      fi
      _vi=$pid$_vi${did}
      print - "$k $_vi" >> $ecfg
    fi
    _vc=($func $dur $high $low $off)
  fi
  : ${(P)__vi::=$_vi}
  set -A $__vc "${(@)_vc}"
  return 0
}

nml_units ()
{
  local __v=$1; shift
  local _d=$1; shift
  local ru=$1; shift
  if [[ x$UNITS == x: ]];then 
    if let _d=$_d > /dev/null 2>&1; then
      _v=$_d
    else
      print -u2 - "unit conversion failed.  use raw value for $_d."
      return 1
    fi
  else
    local _v= _u= _x=
    if _x=$($UNITS -t -- $_d $ru 2> /dev/null); then
      :
    elif _x=$($UNITS -t -- ${_d}$ru $ru 2> /dev/null); then
      :
    else
      print -u2 - "cannot parse $_d in terms of $ru"
      return 1
    fi
    for _u in "$@" ''
    do
      _v=$($UNITS -t -- ${_u}$ru $ru) || return $?
      if [[ $((_x % _v)) -eq 0 ]]; then
        _v=$($UNITS -t -- $_x$ru $_u$ru) || return $?
        _v=$_v$_u
        break
      fi
    done
  fi
  : ${(P)__v::=$_v}
  return 0
}

gen_sysin ()
{
  local np=$1; shift || return $?
  local refd=$1; shift || return $?
  local sysin=$1; shift || return $?
  local k= v=
  for k in cfgw cfgz cfgh cfga cfgb cfgt cfgc
  do
    v=$1
    local $k=
    set -A $k "${(@s/:/)v}"
    print -u2 "$thisx: $k: ${(@q-P)k}"
    shift || return $?
  done

  local CROOT=${CROOT:-ID}

  if [[ x${sysin:--} == x- ]]; then
    exec 3>&1
  else
    exec 3> $sysin
  fi
  print -u3 - " &NIDMBS KCHECK=1, FILE='$sysin' &END"
  print -u3 - " &NICARG X='$cmd ${args}', &END"
  print -u3 - " &NIDPTV TAG='TOP', VALUE='.', &END"
  print -u3 - " &NIDPTV TAG='SUB', VALUE='%[S3]', &END"
  print -u3 - " &NILOGC CH='V', ROOT='vrep', &END"
  print -u3 - " &NITPMS KTEST=-1, WLX=100, WLY=0, DGL=, &END"
  print -u3 - " &NITPMI CROOT='$CROOT', KSW=0, ACC=0.3d0, HINI=0.0d0, &END"
  print -u3 - " &NIPRMD &END"
  print -u3 - " &NIPRMS &END"

  # time
  print -u3 - " &NITMMD CROOT='$CROOT', TINI=0, TEND=$TEND, DT=$dt, TSSA=$TEND, &END"

  # geometry
  local rdom=$refd/domain
  [[ ! -e $rdom ]] && print -u2 - "Not found reference domain $rdom." && return 1
  local NYG=($(cat $rdom))
  local NXG=$NYG[1]; NYG=$NYG[2]

  local WX=$((NXG-1)) WY=$((NYG-1))

  print -u3 - " &NIGEOM CROOT='$CROOT', CKIND='X', O=0.0d0, T='R', W=$WX, WN=-1, &END"
  print -u3 - " &NIGEOM CROOT='$CROOT', CKIND='Y', O=0.0d0, T='R', W=$WY, WN=-1, &END"
  print -u3 - " &NIEDLA CROOT='$CROOT', KDL=3,"
  print -u3 - "         NXG=$NXG, NYG=$NYG, NR=${np:-1},"
  print -u3 - "         LXB=1, LYB=1, LXO=0, LYO=0, LXW=0, LYW=0, ISH=1, &END"

  # geometry Z
  arp_ag_create_sysin_z $CROOT "${(@)cfgz}" >&3

  # scheme
  local kaadvl=
  [[ -n $cfgc[2] ]] && kaadvl="KAADVL=$cfgc[2], "
  print -u3 - " &NIMSWD MSW=0, MINI=0, KAGEC=$cfgc[1], ${kaadvl}&END"

  # initialization
  local DIMS="$NXG,$NYG"

  local grp=
  for grp in VMI VMTI VMHI VMHB VXCFG
  do
    print -u3 - " &NIDATA CROOT='$CROOT', GROUP='$grp', VAR='*', COOR='*', FMT='SKIP', &END"
  done


  local bf= def= k= t= m=
  for k t def in H h 0.0d0  A ms 0.0d0   B mb 0.0d0   T Ts  0.0d0
  do
    for m in max min
    do
      bf=$refd/$m$k
      [[ ! -e $bf ]] && print -u2 - "Cannot found $bf" && return 1
      nml_input $CROOT VXCFG ${t}${m} ID.Ha $def $bf $DIMS || return $?
    done
  done

  local iniH=$refd/maxH
  nml_input $CROOT VMHI  oH    ID.Ha 0.0d0 $iniH   $DIMS || return $?
  nml_input $CROOT VMHI  oB    ID.Ha 0.0d0               || return $?

  # experiment setting

  print -u3 -n - " &NITGVW"
  print -u3 -n - " KWTYP=$cfgw[1],"
  [[ x${cfgw[2]:--} != x- ]] && print -u3 -n - " WPOWER=$cfgw[2],"
  print -u3 - " &END"
  nml_tgvc -u3 MS "${(@)cfgA}" || return $?
  nml_tgvc -u3 MB "${(@)cfgB}" || return $?
  nml_tgvc -u3 DH "${(@)cfgH}" || return $?
  nml_tgvc -u3 TS "${(@)cfgT}" || return $?

  # output
  print -u3 - " &NIAFWR CROOT='$CROOT', GROUP=' ', DT=$rect, KSW=-9, &END"

  local grp= gdt= ksw= gv=
  for grp in $GRPS
  do
    gdt=$RECG[$grp]
    case $gdt in
    (:) gdt='';;
    (-) gdt="DT=$TEND,";;
    ('') gdt='';;
    (*)  [[ $gdt -lt $dt ]] && gdt=$dt
         gdt="DT=$gdt,";;
    esac
    ksw=+1
    [[ -n $GFILV[$grp] ]] && ksw=-1
    print -u3 - " &NIAFWR CROOT='$CROOT', GROUP='$grp', ${gdt} KSW=$ksw, &END"
    for gv in ${(s/:/)GFILV[$grp]}
    do
      print -u3 - " &NIAVFL CROOT='$CROOT', GROUP='$grp', VAR='$gv', KSW=+1, &END"
    done
  done

  exec 3>&-
  return 0
}

nml_tgvc ()
{
  local opts=$1; shift || return $?
  local vtag=$1;  shift || return $?
  local func=$1 dur=$2 high=$3 low=$4 off=$5
  local file=

  local hdec=0 decr=0 linc=0 incr=0 hstd=0 lstd=0 phs=0 type=

  if [[ -e $func ]]; then
    file=$func type=0
  else
    case $func in
    (s*) type=1;;  # step
    (c*) type=2;;  # cosine
    (l*) type=3;;  # linear
    (e*) type=4;;  # exponential
    (v*) type=5;;  # variation
    (*)  print -u2 - "$thisx: invalid evolution pattern $vtag"; return 1;;
    esac

    if [[ $dur -eq 0 ]]; then
      decr=0 incr=0 phs=0
    else
      decr=$($GMT math -Q $dur $high MUL $high $low ADD DIV =) || return $?
      incr=$($GMT math -Q $dur $low  MUL $high $low ADD DIV =) || return $?
      phs=$($GMT  math -Q $dur $off  MUL $high $low ADD DIV =) || return $?
    fi
    hstd=0 lstd=0
  fi

  print -n $opts - " &NITGVC"
  print -n $opts - " TAG='$vtag',"
  print -n $opts - " KSWPAT=$type,"
  print -n $opts - " TDECR=$decr,"
  print -n $opts - " TINCR=$incr,"
  print -n $opts - " THSTD=$hstd,"
  print -n $opts - " TLSTD=$lstd,"
  print -n $opts - " TPHASE=$phs,"
  [[ -n $file ]] && print -n $opts - " FILE='$file',"
  print    $opts - " &END"

  return 0
}

nml_input ()
{
  local croot=$1 grp=$2 var=$3 coor=$4; shift 4 || return $?
  local val=$1 inif=$2 dims=$3

  if [[ -z $inif ]]; then
    print -u3 - " &NIDATA CROOT='$CROOT', GROUP='$grp', VAR='$var', COOR='$coor',"
    print -u3 - "         VAL=$val, FNM=' ', "
    print -u3 - "         FMT='CONST', LB=-1, IR=0, &END"
  elif [[ -z $dims ]];then
    print -u2 - "$thisx: need dimension for namelist $croot/$grp/$var/$coor."
    return 1
  elif [[ ! -e $inif ]]; then
    print -u2 - "$thisx: cannot find $inif."
  else
    print -u3 - " &NIDATA CROOT='$CROOT', GROUP='$grp', VAR='$var', COOR='$coor',"
    print -u3 - "         VAL=$val, FNM='$inif', DIMS=$dims, "
    print -u3 - "         FMT=' ', LB=-1, IR=0, &END"
  fi
}

# copy from arp_insert.sh
arp_ag_create_sysin_z ()
{
  local croot=$1
  local nz=$2 ztyp=$3
  case $ztyp in
  (l) :
      ;;
  (p1p*)
      local wtyp=${(M)ztyp%%[ivxn]*}
      : ${wtyp:=ii}
      set_weight wtyp $wtyp || return $?
      local pset=${ztyp%%[ivxn]*}
      local pb=${pset#p1p}
      print " &NIGEOZ CROOT='$croot', IPOWER=1,   CWGT=1.0d0,     COFS=0.0d0  &END"
      print " &NIGEOZ CROOT='$croot', IPOWER=$pb, CWGT=$wtyp.0d0, COFS=0.0d0  &END"
      ;;
  (e*e*)
      local wtyp=${(M)ztyp%%[ivx]*}
      : ${wtyp:=i}
      local pset=${ztyp%%[ivx]*}
      local pb=(${(s:p:)pset})
      pa=$pa[1]; shift pb
      set_weight wtyp $wtyp || return $?
      print " &NIGEOZ CROOT='$croot', IPOWER=$pa, CWGT=1.0d0, COFS=-1.0d0, CIFLG='E', &END"
      print " &NIGEOZ CROOT='$croot', IPOWER=$pb, CWGT=$wtyp.0d0, COFS=-1.0d0, CIFLG='E', &END"
      ;;
  (e*)
      local pe=${ztyp#e}
      print " &NIGEOZ CROOT='$croot', IPOWER=$pe, CWGT=1.0d0, COFS=-1.0d0, CIFLG='E', &END"
      ;;

  (p2) print " &NIGEOZ CROOT='$croot', IPOWER=2,  CWGT=1.0d0,  COFS=0.0d0  &END"
       ;;
  (glimmer)
      print " &NIGEOZ CROOT='$croot', IPOWER=0,  CWGT=-1.0d0, COFS= 0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', IPOWER=-2, CWGT= 4.0d0, COFS=-2.0d0 &END"
      ;;
  (wv3d4)
      print " &NIGEOZ CROOT='$croot', IPOWER = 1, CWGT = 4.0d0,   COFS =  0.0d0, DNM=16.0d0, &END"
      print " &NIGEOZ CROOT='$croot', IPOWER = 0, CWGT = 12.0d0,  COFS =  0.0d0, &END"
      print " &NIGEOZ CROOT='$croot', IPOWER = 1, CWGT = -15.0d0, COFS = -1.0d0, &END"
      print " &NIGEOZ CROOT='$croot', IPOWER = 5, CWGT = 3.0d0,   COFS = -1.0d0, &END"
      ;;
  (wv3)
      print " &NIGEOZ CROOT='$croot', IPOWER=0, CWGT=0.0d0,  COFS=0.0d0, DNM=4.0d0, &END"
      print " &NIGEOZ CROOT='$croot', IPOWER=0, CWGT=4.0d0,  COFS=0.0d0,  &END"
      print " &NIGEOZ CROOT='$croot', IPOWER=1, CWGT=-5.0d0, COFS=-1.0d0, &END"
      print " &NIGEOZ CROOT='$croot', IPOWER=5, CWGT=1.0d0,  COFS=-1.0d0, &END"
      ;;
  (wv3intg)
      # : = [- d^6 + 15 d^2 - 24 d + 10] / 10
      print " &NIGEOZ CROOT='$croot', IPOWER=0, CWGT=0.0d0,  COFS=0.0d0, DNM=10.0d0, &END"
      print " &NIGEOZ CROOT='$croot', IPOWER=0, CWGT=10.0d0, COFS=-1.0d0, &END"
      print " &NIGEOZ CROOT='$croot', IPOWER=1, CWGT=-24.0d0,COFS=-1.0d0, &END"
      print " &NIGEOZ CROOT='$croot', IPOWER=2, CWGT=15.0d0, COFS=-1.0d0, &END"
      print " &NIGEOZ CROOT='$croot', IPOWER=6, CWGT=-1.0d0, COFS=-1.0d0, &END"
      ;;
  (sally)
      print " &NIGEOZ CROOT='$croot', NLV=11, DXN= 1.d0, DXD=100.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=-1, DXN= 6.d0, DXD=0.0d0   &END"
      ;;
  (levtest)
      print " &NIGEOZ CROOT='$croot', NLV=113, DXN= 1.d0,   DXD=256.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=35,  DXN= 2.d0,   DXD=0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=-1,  DXN= 4.d0,   DXD=0.0d0 &END"
      ;;
  (levdv)
      ## 1 8192 530 931
      ## 2 8192 117 931
      ## 4 8192 85 931
      ## 8 8192 64 931
      ## 16 8192 49 931
      ## 32 8192 39 931
      ## 64 8192 35 931
      ## 128 8192 20 931
      print " &NIGEOZ CROOT='$croot', NLV=9,  DXN= 1.d0, DXD=32.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=7,   DXN= 2.d0, DXD=0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=-1,  DXN= 4.d0, DXD=0.0d0 &END"
      [[ x${nz:--} == x- ]] && nz=18
      ;;
  (optsdiv)
      ## ./levopt 3 5 10 0.015 0 3000 50000 1
      print " &NIGEOZ CROOT='$croot', NLV=13, DXN=1.d0, DXD=32.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=5, DXN=2.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=-1, DXN=4.d0, DXD=0.d0, &END"
      [[ x${nz:--} == x- ]] && nz=20
      ;;
  (optsbix)
      print " &NIGEOZ CROOT='$croot', NLV=69, DXN=1.d0, DXD=512.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=17, DXN=2.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=12, DXN=4.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=11, DXN=8.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=9, DXN=16.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=-1, DXN=32.d0, DXD=0.d0, &END"
      [[ x${nz:--} == x- ]] && nz=119
      ;;
  (optsbx)
      print " &NIGEOZ CROOT='$croot', NLV=137, DXN=1.d0, DXD=1024.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=33, DXN=2.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=25, DXN=4.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=20, DXN=8.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=17, DXN=16.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=-1, DXN=32.d0, DXD=0.d0, &END"
      [[ x${nz:--} == x- ]] && nz=238
      ;;
  (optsbxi)
      print " &NIGEOZ CROOT='$croot', NLV=275, DXN=1.d0, DXD=2048.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=64, DXN=2.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=49, DXN=4.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=39, DXN=8.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=35, DXN=16.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=-1, DXN=32.d0, DXD=0.d0, &END"
      [[ x${nz:--} == x- ]] && nz=477
      ;;
  (optsbxiii)
      ## 1 8192 530 931
      ## 2 8192 117 931
      ## 4 8192 85 931
      ## 8 8192 64 931
      ## 16 8192 49 931
      ## 32 8192 39 931
      ## 64 8192 35 931
      ## 128 8192 20 931
      print " &NIGEOZ CROOT='$croot', NLV=529, DXN= 1.d0,   DXD=8192.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=117, DXN= 2.d0,   DXD=0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=85,  DXN= 4.d0,   DXD=0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=64,  DXN= 8.d0,   DXD=0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=49,  DXN= 16.d0,  DXD=0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=39,  DXN= 32.d0,  DXD=0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=35,  DXN= 64.d0,  DXD=0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=-1,  DXN= 128.d0, DXD=0.0d0 &END"
      [[ x${nz:--} == x- ]] && nz=931
      ;;
  (optsbxiv)
      ## 1 16384 742 1301
      ## 2 16384 159 1301
      ## 4 16384 117 1301
      ## 8 16384 85 1301
      ## 16 16384 64 1301
      ## 32 16384 49 1301
      ## 64 16384 39 1301
      ## 128 16384 35 1301
      ## 256 16384 20 1301
      print " &NIGEOZ CROOT='$croot', NLV=741, DXN= 1.d0,   DXD=16384.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=159, DXN= 2.d0,   DXD=0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=117, DXN= 4.d0,   DXD=0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=85,  DXN= 8.d0,   DXD=0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=64,  DXN= 16.d0,  DXD=0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=49,  DXN= 32.d0,  DXD=0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=39,  DXN= 64.d0,  DXD=0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=35,  DXN= 128.d0, DXD=0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=-1,  DXN= 256.d0, DXD=0.0d0 &END"
      [[ x${nz:--} == x- ]] && nz=1301
      ;;
  (optsexiii)
      print " &NIGEOZ CROOT='$croot', NLV=569, DXN=1.d0, DXD=8192.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=125, DXN=2.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=91, DXN=4.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=70, DXN=8.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=53, DXN=16.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=43, DXN=32.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=38, DXN=64.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=-1, DXN=128.d0, DXD=0.d0, &END"
      [[ x${nz:--} == x- ]] && nz=998
      ;;
  (optsfxiv)
      print " &NIGEOZ CROOT='$croot', NLV=1135, DXN=1.d0, DXD=16384.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=248, DXN=2.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=182, DXN=4.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=137, DXN=8.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=106, DXN=16.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=87, DXN=32.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=76, DXN=64.d0, DXD=0.d0, &END"
      print " &NIGEOZ CROOT='$croot', NLV=-1, DXN=128.d0, DXD=0.d0, &END"
      [[ x${nz:--} == x- ]] && nz=1994
      ;;
  (optsfxv)
      print "&NIGEOZ CROOT='$croot', NLV=2271, DXN=1.d0, DXD=32768.d0, &END"
      print "&NIGEOZ CROOT='$croot', NLV=496, DXN=2.d0, DXD=0.d0, &END"
      print "&NIGEOZ CROOT='$croot', NLV=364, DXN=4.d0, DXD=0.d0, &END"
      print "&NIGEOZ CROOT='$croot', NLV=272, DXN=8.d0, DXD=0.d0, &END"
      print "&NIGEOZ CROOT='$croot', NLV=211, DXN=16.d0, DXD=0.d0, &END"
      print "&NIGEOZ CROOT='$croot', NLV=171, DXN=32.d0, DXD=0.d0, &END"
      print "&NIGEOZ CROOT='$croot', NLV=152, DXN=64.d0, DXD=0.d0, &END"
      print "&NIGEOZ CROOT='$croot', NLV=-1, DXN=128.d0, DXD=0.d0, &END"
      [[ x${nz:--} == x- ]] && nz=3989
      ;;
  (optsc)
      # 581 0.0001
      # 175 0.0002
      #  82 0.0005
      #  59 0.001
      #  66 0.002
      #  35 0.005
      #  32 0.01
      #   9 0.02
      print " &NIGEOZ CROOT='$croot', NLV=581, DXN= 1.d0,   DXD=10000.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=176, DXN= 2.d0,   DXD=0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=83,  DXN= 5.d0,   DXD=0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=60,  DXN= 10.d0,  DXD=0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=67,  DXN= 20.d0,  DXD=0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=36,  DXN= 50.d0,  DXD=0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=33,  DXN= 100.d0, DXD=0.0d0 &END"
      print " &NIGEOZ CROOT='$croot', NLV=-1,  DXN= 200.d0, DXD=0.0d0 &END"
      ;;
  esac
  [[ -n $nz ]] && print " &NICOOR CROOT='$croot', NZ=$nz, &END"
  return 0
}

set_weight ()
{
  local __v=$1 __r=
  case $2 in
  (i)    __r=1;;
  (ii)   __r=3;;
  (iii)  __r=7;;
  (iv)   __r=15;;
  (v)    __r=31;;
  (vi)   __r=63;;
  (vii)  __r=127;;
  (viii) __r=255;;
  (ix)   __r=511;;
  (x)    __r=1023;;
  (n*)   __r=${2: 1}; let __r--;;
  (*)    print -u2 "$thisx: unknown weight id $wtyp ($ztyp)"; return 1;;
  esac
  : ${(P)__v::=$__r}
  return 0
}

main "$@"
exit $?
